// Auto-generated by extractGASFunctionsFromSrc.ts â€” do not edit manually
// Purpose: attach all exported GAS_* functions to globalThis for shim.gs wrappers, with a small smoke test log
import { isCtor } from '@lib/isCtor';
import { addCommonMethods } from '../../features/sheets/addCommonMethods';
import * as SheetClasses from '../../features/sheets';
import * as GAS from './index';

Object.values(SheetClasses).forEach(sheetClass => {
  if (isCtor(sheetClass)) addCommonMethods(sheetClass);
});

(function attachGASGlobals(){
  const g = (globalThis as unknown as Record<string, unknown>);
  let attached = 0;
  for (const [key, val] of Object.entries(GAS)) {
    if (typeof key === 'string' && key.startsWith('GAS_') && typeof val === 'function') {
      g[key] = val as unknown;
      attached++;
    }
  }
  const logStr = `attachGASGlobals: attached ${attached} GAS_* function${attached === 1 ? '' : 's'}`;
  try { (console as any)?.log?.(logStr); } catch {}
  try { (globalThis as any)?.Logger?.log?.(logStr); } catch {}
  (g as any).__GAS_ATTACH_SUMMARY = {
    attached,
    totalExports: Object.keys(GAS).length,
    timestamp: (new Date()).toISOString(),
  };
})();
