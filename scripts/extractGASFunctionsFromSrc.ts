import fs from "fs";
import path from "path";

// Config
const GAS_EXPORTS = path.resolve(__dirname, "../src/gasExports.ts");
const SHIM_GLOBALS = path.resolve(__dirname, "../src/shimGlobals.ts");
const SRC_DIR = path.resolve(__dirname, "../src");

// Regex to match top-level exported functions named GASxxx
const exportFunctionRegex =
  /^\s*export\s+(?:function|const)\s+(GAS_\w+)\s*(?:\(|=)/gm;

// Recursively find all .ts files in a directory
function getAllTsFiles(dir: string): string[] {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  return entries.flatMap((entry) => {
    const res = path.resolve(dir, entry.name);
    return entry.isDirectory()
      ? getAllTsFiles(res)
      : res.endsWith(".ts")
      ? [res]
      : [];
  });
}

// Collect GAS-prefixed function names from .ts files
const gasFunctions = new Set<string>();

for (const file of getAllTsFiles(SRC_DIR)) {
  const content = fs.readFileSync(file, "utf8");
  const matches = [...content.matchAll(exportFunctionRegex)];
  for (const match of matches) {
    gasFunctions.add(match[1]);
  }
}

// Sort and strip "GAS" prefix
const sortedNames = [...gasFunctions].sort();
const shimGlobals = sortedNames.map((name) => name.slice(4));

// Emit shimGlobals.ts
const shimLines = [
  "// Auto-generated by extractGASFunctionsFromSrc.ts — do not edit manually",
  "",
  "export const shimGlobals = [",
  ...shimGlobals.map((name) => `  "${name}",`),
  "] as const;",
  "",
  "export type ExportedGlobal = (typeof shimGlobals)[number];",
];

fs.writeFileSync(SHIM_GLOBALS, shimLines.join("\n"), "utf8");

console.log(`✅ Found ${shimGlobals.length} GAS functions`);
console.log(`✅ Wrote to: ${SHIM_GLOBALS}`);

// Emit gasExports.ts
const lines = [
  "// Auto-generated by extractGASFunctionsFromSrc.ts — do not edit manually",
  "",
  ...shimGlobals.map((name) => `export { GAS_${name} } from "./gasFunctions";`),
];

fs.writeFileSync(GAS_EXPORTS, lines.join("\n"), "utf8");

console.log(`✅ Wrote to: ${GAS_EXPORTS}`);
